setwd("~/school/workspace/dashboard-homeless-population")
library(readxl)
library(tidyverse)
library(DT)
library(ggplot2)
library(stringr)
library(tidyr)
library(readxl)
library(shiny)
setwd("~/Desktop/BIS 412/dashboard-homeless-population")
library(readxl)
library(tidyverse)
library(DT)
library(ggplot2)
library(stringr)
library(tidyr)
library(readxl)
library(shiny)
# setwd("~/Desktop/BIS 412/dashboard-homeless-population")
setwd("~/school/workspace/dashboard-homeless-population")
excel_sheets("2007-2020-PIT-Estimates-by-CoC.xlsx")
file <- "2007-2020-PIT-Estimates-by-CoC.xlsx"
selected_sheets <- excel_sheets(file)
selected_sheets <- selected_sheets[!selected_sheets %in% c("CoC Mergers", "Revisions", "2020")]
dat <- data.frame("CoC Number" = character(),
"CoC Name" = character(),
name = character(),
value = double())
data <- data.frame("CoC Number" = character(),
"CoC Name" = character(),
name = character(),
value = double())
longdat <- data.frame("CoC Number" = character(), "CoC Name" = character(), name = character(),
value = double())
for(sheet in selected_sheets) {
dat <- read_excel(file, sheet = sheet)
longdat <- pivot_longer(dat, !c("CoC Number", "CoC Name"))
data <- rbind(data, longdat)
}
dat <- read_excel(file, sheet = "2020") %>%
select(!"CoC Category")
longdat <- pivot_longer(dat, !c("CoC Number", "CoC Name"))
data <- rbind(data, longdat)
rm(dat)
rm(longdat)
data$year <- str_extract(data$name, "\\d{4}")
data$name <- str_remove_all(data$name, "\\d{4}")
data$overall <- str_extract_all(data$name, "^Overall Homeless")
data$genderTF <- str_detect(data$name, "Overall Homeless$|Overall Homeless - Female|Overall Homeless - Male|Overall Homeless - Transgender|Overall Homeless - Gender Non-Conforming")
data$state1 <- str_extract_all(data$`CoC Number`, "^[A-Z]{2}")
data$state <- state.name[match(data$state1, state.abb)]
simple_data <- data %>%
filter(overall == "Overall Homeless", genderTF == TRUE) %>% drop_na() %>%
select(!overall)
simple_data$gender <- str_extract_all(simple_data$name,
"Female|Male|Transgender|Gender Non-Conforming", simplify = TRUE) %>%
as.factor()
library(readxl)
library(tidyverse)
library(DT)
library(ggplot2)
library(stringr)
library(tidyr)
library(readxl)
library(shiny)
# setwd("~/Desktop/BIS 412/dashboard-homeless-population")
setwd("~/school/workspace/dashboard-homeless-population")
excel_sheets("2007-2020-PIT-Estimates-by-CoC.xlsx")
data$genderTF <- str_detect(data$name, "^Overall Homeless$|Overall Homeless - Female|Overall Homeless - Male|Overall Homeless - Transgender|Overall Homeless - Gender Non-Conforming")
file <- "2007-2020-PIT-Estimates-by-CoC.xlsx"
selected_sheets <- excel_sheets(file)
selected_sheets <- selected_sheets[!selected_sheets %in% c("CoC Mergers", "Revisions", "2020")]
dat <- data.frame("CoC Number" = character(),
"CoC Name" = character(),
name = character(),
value = double())
data <- data.frame("CoC Number" = character(),
"CoC Name" = character(),
name = character(),
value = double())
longdat <- data.frame("CoC Number" = character(), "CoC Name" = character(), name = character(),
value = double())
for(sheet in selected_sheets) {
dat <- read_excel(file, sheet = sheet)
longdat <- pivot_longer(dat, !c("CoC Number", "CoC Name"))
data <- rbind(data, longdat)
}
dat <- read_excel(file, sheet = "2020") %>%
select(!"CoC Category")
longdat <- pivot_longer(dat, !c("CoC Number", "CoC Name"))
data <- rbind(data, longdat)
rm(dat)
rm(longdat)
data$year <- str_extract(data$name, "\\d{4}")
data$name <- str_remove_all(data$name, "\\d{4}")
data$overall <- str_extract_all(data$name, "^Overall Homeless")
data$genderTF <- str_detect(data$name, "^Overall Homeless$|Overall Homeless - Female|Overall Homeless - Male|Overall Homeless - Transgender|Overall Homeless - Gender Non-Conforming")
data$state1 <- str_extract_all(data$`CoC Number`, "^[A-Z]{2}")
data$state <- state.name[match(data$state1, state.abb)]
simple_data <- data %>%
filter(overall == "Overall Homeless", genderTF == TRUE) %>% drop_na() %>%
select(!overall)
simple_data$gender <- str_extract_all(simple_data$name,
"Female|Male|Transgender|Gender Non-Conforming", simplify = TRUE) %>%
as.factor()
View(simple_data)
data$genderTF <- str_detect(data$name, "Overall Homeless - Female|Overall Homeless - Male|Overall Homeless - Transgender|Overall Homeless - Gender Non-Conforming")
data$overall <- str_extract_all(data$name, "^Overall Homeless$")
View(data)
data$overall <- str_extract_all(data$name, "^Overall Homeless$")
View(simple_data)
output$table = renderDataTable({ simple_data %>% filter(state == state) %>%
select(state, name, gender, value, year)
}
)
overall_data <- data %>%
filter(name = "Overall Homeless,")
overall_data <- data %>%
filter(name == "Overall Homeless,")
View(overall_data)
overall_data <- data %>%
filter(name == "Overall Homeless, ")
View(overall_data)
library(readxl)
library(tidyverse)
library(DT)
library(ggplot2)
library(stringr)
library(tidyr)
library(readxl)
library(shiny)
# setwd("~/Desktop/BIS 412/dashboard-homeless-population")
setwd("~/school/workspace/dashboard-homeless-population")
excel_sheets("2007-2020-PIT-Estimates-by-CoC.xlsx")
file <- "2007-2020-PIT-Estimates-by-CoC.xlsx"
selected_sheets <- excel_sheets(file)
selected_sheets <- selected_sheets[!selected_sheets %in% c("CoC Mergers", "Revisions", "2020")]
dat <- data.frame("CoC Number" = character(),
"CoC Name" = character(),
name = character(),
value = double())
data <- data.frame("CoC Number" = character(),
"CoC Name" = character(),
name = character(),
value = double())
longdat <- data.frame("CoC Number" = character(), "CoC Name" = character(), name = character(),
value = double())
for(sheet in selected_sheets) {
dat <- read_excel(file, sheet = sheet)
longdat <- pivot_longer(dat, !c("CoC Number", "CoC Name"))
data <- rbind(data, longdat)
}
dat <- read_excel(file, sheet = "2020") %>%
select(!"CoC Category")
longdat <- pivot_longer(dat, !c("CoC Number", "CoC Name"))
data <- rbind(data, longdat)
rm(dat)
rm(longdat)
data$year <- str_extract(data$name, "\\d{4}")
data$name <- str_remove_all(data$name, "\\d{4}")
data$overall <- str_extract_all(data$name, "^Overall Homeless")
data$genderTF <- str_detect(data$name, "Overall Homeless$|Overall Homeless - Female|Overall Homeless - Male|Overall Homeless - Transgender|Overall Homeless - Gender Non-Conforming")
data$state1 <- str_extract_all(data$`CoC Number`, "^[A-Z]{2}")
data$state <- state.name[match(data$state1, state.abb)]
simple_data <- data %>%
filter(overall == "Overall Homeless", genderTF == TRUE) %>% drop_na() %>%
select(!overall)
simple_data$gender <- str_extract_all(simple_data$name,
"Female|Male|Transgender|Gender Non-Conforming", simplify = TRUE) %>%
as.factor()
overall_data <- data %>%
filter(name == "Overall Homeless, ")
View(simple_data)
View(overall_data)
ggplot(data = overall_data, mapping = aes(x = year, y = value)) +
geom_point(size = 2.5, alpha = 0.6)
ggplot(data = overall_data, mapping = aes(x = year, y = value)) +
geom_line()
ggplot(data = overall_data, aes(x = year, y = value)) +
geom_line()
overallbar <- ggplot(overall_data, aes(x = year, y = value)) +
geom_bar(stat = "identity") + scale_fill_grey()
library(readxl)
library(tidyverse)
library(DT)
library(ggplot2)
library(stringr)
library(tidyr)
library(readxl)
library(shiny)
#
# setwd("~/Desktop/BIS 412/dashboard-homeless-population")
setwd("~/school/workspace/dashboard-homeless-population")
excel_sheets("2007-2020-PIT-Estimates-by-CoC.xlsx")
file <- "2007-2020-PIT-Estimates-by-CoC.xlsx"
selected_sheets <- excel_sheets(file)
selected_sheets <- selected_sheets[!selected_sheets %in% c("CoC Mergers", "Revisions", "2020")]
dat <- data.frame("CoC Number" = character(),
"CoC Name" = character(),
name = character(),
value = double())
data <- data.frame("CoC Number" = character(),
"CoC Name" = character(),
name = character(),
value = double())
longdat <- data.frame("CoC Number" = character(), "CoC Name" = character(), name = character(),
value = double())
for(sheet in selected_sheets) {
dat <- read_excel(file, sheet = sheet)
longdat <- pivot_longer(dat, !c("CoC Number", "CoC Name"))
data <- rbind(data, longdat)
}
dat <- read_excel(file, sheet = "2020") %>%
select(!"CoC Category")
longdat <- pivot_longer(dat, !c("CoC Number", "CoC Name"))
data <- rbind(data, longdat)
rm(dat)
rm(longdat)
data$year <- str_extract(data$name, "\\d{4}")
data$name <- str_remove_all(data$name, "\\d{4}")
data$overall <- str_extract_all(data$name, "^Overall Homeless")
data$genderTF <- str_detect(data$name, "Overall Homeless$|Overall Homeless - Female|Overall Homeless - Male|Overall Homeless - Transgender|Overall Homeless - Gender Non-Conforming")
data$state1 <- str_extract_all(data$`CoC Number`, "^[A-Z]{2}")
data$state <- state.name[match(data$state1, state.abb)]
simple_data <- data %>%
filter(overall == "Overall Homeless", genderTF == TRUE) %>% drop_na() %>%
select(!overall)
simple_data$gender <- str_extract_all(simple_data$name,
"Female|Male|Transgender|Gender Non-Conforming", simplify = TRUE) %>%
as.factor()
overall_data <- data %>%
filter(name == "Overall Homeless, ") %>% select(state, year, value) %>% drop_na()
overallbar <- ggplot(overall_data, aes(x = year, y = value)) +
geom_bar(stat = "identity") + scale_fill_grey()
ggplot(overall_data, aes(x = year, y = value)) +
geom_bar(stat = "identity") + scale_fill_grey()
ggplot(overall_data, aes(x = year, y = value)) +
geom_bar(stat = "identity", fill = "red")
ggplot(overall_data, aes(x = year, y = value)) +
geom_bar(stat = "identity", fill = "red50")
remove(overallbar)
color
?color
ggplot(overall_data, aes(x = year, y = value)) +
geom_bar(stat = "identity", fill = "coral1")
overallbar <- ggplot(overall_data, aes(x = year, y = value)) +
geom_bar(stat = "identity", fill = "coral1")
overallbar + scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
overallbar <- ggplot(overall_data, aes(x = year, y = value)) +
geom_bar(stat = "identity", fill = "coral3")
overallbar + scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
overallbar <- ggplot(overall_data, aes(x = year, y = value)) +
geom_bar(stat = "identity", fill = "bisque")
overallbar <- ggplot(overall_data, aes(x = year, y = value)) +
geom_bar(stat = "identity", fill = "bisque")
overallbar + scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
overallbar <- ggplot(overall_data, aes(x = year, y = value)) +
geom_bar(stat = "identity", fill = "bisque3")
overallbar + scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
overallbar <- ggplot(overall_data, aes(x = year, y = value)) +
geom_bar(stat = "identity", fill = "grey50")
overallbar + scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
overallbar <- ggplot(overall_data, aes(x = year, y = value)) +
geom_bar(stat = "identity", fill = "darkred")
overallbar + scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
overallbar <- ggplot(overall_data, aes(x = year, y = value)) +
geom_bar(stat = "identity", fill = "darksalmon")
overallbar + scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
overallbar <- ggplot(overall_data, aes(x = year, y = value)) +
geom_bar(stat = "identity", fill = "darksalmon") +
labs(title = "Overall Homeless from 2007 - 2020")
overallbar + scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
shinyApp(
ui = fluidPage(
selectInput("state", label = "State:", choice = unique(overall_data$state),
selected = "Alaska"),
plotOutput("overallplot")
),
server = function(input, output) {
state <- reactive(input$state)
output$overallplot = renderPlot({ overall_data %>% filter(state == input$state) %>%
ggplot(mapping = aes(x = year, y = value, color = state)) +
geom_point(size = 2.5, alpha = 0.6) +
labs(title = "Overall Homeless by State") + plot.title(size = 12)
})
}
)
output$overallplot = renderPlot({ overall_data %>% filter(state == input$state) %>%
ggplot(mapping = aes(x = year, y = value, color = state)) +
geom_point(size = 2.5, alpha = 0.6) +
labs(title = "Overall Homeless by State")
})
overallbar <- ggplot(overall_data, aes(x = year, y = value)) +
geom_bar(stat = "identity", fill = "darksalmon") +
labs(title = "Overall Homeless from 2007 - 2020")
overallbar + scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
shinyApp(
ui = fluidPage(
selectInput("state", label = "State:", choice = unique(overall_data$state),
selected = "Alaska"),
plotOutput("overallplot")
),
server = function(input, output) {
state <- reactive(input$state)
output$overallplot = renderPlot({ overall_data %>% filter(state == input$state) %>%
ggplot(mapping = aes(x = year, y = value, color = state)) +
geom_point(size = 2.5, alpha = 0.6) +
labs(title = "Overall Homeless by State")
})
}
)
overallbar <- ggplot(overall_data, aes(x = year, y = value)) +
geom_bar(stat = "identity", fill = "darksalmon") +
labs(title = "Overall Homeless from 2007 - 2020") + theme(plot.title = element_text(size = 12))
overallbar + scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
shinyApp(
ui = fluidPage(
selectInput("state", label = "State:", choice = unique(overall_data$state),
selected = "Alaska"),
plotOutput("overallplot")
),
server = function(input, output) {
state <- reactive(input$state)
output$overallplot = renderPlot({ overall_data %>% filter(state == input$state) %>%
ggplot(mapping = aes(x = year, y = value, color = state)) +
geom_point(size = 2.5, alpha = 0.6) +
labs(title = "Overall Homeless by State") + theme(plot.title = element_text(size = 18))
})
}
)
overallbar <- ggplot(overall_data, aes(x = year, y = value)) +
geom_bar(stat = "identity", fill = "darksalmon") +
labs(title = "Overall Homeless from 2007 - 2020") + theme(plot.title = element_text(size = 12))
overallbar + scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
shinyApp(
ui = fluidPage(
selectInput("state", label = "State:", choice = unique(overall_data$state),
selected = "Alaska"),
plotOutput("overallplot")
),
server = function(input, output) {
state <- reactive(input$state)
output$overallplot = renderPlot({ overall_data %>% filter(state == input$state) %>%
ggplot(mapping = aes(x = year, y = value, color = state)) +
geom_point(size = 2.5, alpha = 0.6) +
labs(title = "Overall Homeless by State") + theme(plot.title = element_text(size = 18))
})
}
)
genderplot <- ggplot(data = simple_data, mapping = aes(x = year, y = value, color = gender))  +
geom_point(size = 2.5, alpha = 0.6)
shinyApp(
ui = fluidPage(
selectInput("gender", label = "Gender:", choice = unique(simple_data$gender),
selected = "Male"),
plotOutput("genderplot")
),
server = function(input, output) {
output$genderplot = renderPlot({ simple_data %>% filter(gender == input$gender) %>%
ggplot(mapping = aes(x = year, y = value, color = gender))  +
geom_point(size = 2.5, alpha = 0.6) + labs(title = "Overall Homeless By Gender") + theme(plot.title = element_text(size = 16))
})
}
)
View(overall_data)
overall_data <- data %>%
filter(name == "Overall Homeless, ") %>% select(state,`CoC Name` year, value) %>% drop_na()
overall_data <- data %>%
filter(name == "Overall Homeless, ") %>% select(state,`CoC Name`, year, value) %>% drop_na()
genderplot <- ggplot(data = simple_data, mapping = aes(x = year, y = value, color = gender))  +
geom_point(size = 2.5, alpha = 0.6)
shinyApp(
ui = fluidPage(
selectInput("gender", label = "Gender:", choice = unique(simple_data$gender),
selected = "Male"),
plotOutput("genderplot")
),
server = function(input, output) {
output$genderplot = renderPlot({ simple_data %>% filter(gender == input$gender) %>%
ggplot(mapping = aes(x = year, y = value))  +
geom_point(size = 2.5, alpha = 0.6) + labs(title = "Overall Homeless By Gender") + theme(plot.title = element_text(size = 16))
})
}
)
genderplot <- ggplot(data = simple_data, mapping = aes(x = year, y = value, color = gender))  +
geom_point(size = 2.5, alpha = 0.6)
shinyApp(
ui = fluidPage(
selectInput("gender", label = "Gender:", choice = unique(simple_data$gender),
selected = "Male"),
plotOutput("genderplot")
),
server = function(input, output) {
output$genderplot = renderPlot({ simple_data %>% filter(gender == input$gender) %>%
ggplot(mapping = aes(x = year, y = value, color = gender))  +
geom_point(size = 2.5, alpha = 0.6) + labs(title = "Overall Homeless By Gender") + theme(plot.title = element_text(size = 16))
})
}
)
overallbar <- ggplot(overall_data, aes(x = year, y = value)) +
geom_bar(stat = "identity", fill = "darksalmon") +
labs(title = "Overall Homeless from 2007 - 2020") + theme(plot.title = element_text(size = 12))
overallbar + scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
shinyApp(
ui = fluidPage(
selectInput("state", label = "State:", choice = unique(overall_data$state),
selected = "Alaska"),
plotOutput("overallplot")
),
server = function(input, output) {
state <- reactive(input$state)
output$overallplot = renderPlot({ overall_data %>% filter(state == input$state) %>%
ggplot(mapping = aes(x = year, y = value, color = `CoC Name`)) +
geom_point(size = 2.5, alpha = 0.6) +
labs(title = "Overall Homeless by State") + theme(plot.title = element_text(size = 16), legend.position = "none")
})
}
)
overallbar <- ggplot(overall_data, aes(x = year, y = value)) +
geom_bar(stat = "identity", fill = "darksalmon") +
labs(title = "Overall Homeless from 2007 - 2020") + theme(plot.title = element_text(size = 12))
overallbar + scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
shinyApp(
ui = fluidPage(
selectInput("state", label = "State:", choice = unique(overall_data$state),
selected = "Alaska"),
plotOutput("overallplot")
),
server = function(input, output) {
state <- reactive(input$state)
output$overallplot = renderPlot({ overall_data %>% filter(state == input$state) %>%
ggplot(mapping = aes(x = year, y = value, color = `CoC Name`)) +
geom_point(size = 2.5, alpha = 0.6) +
labs(title = "Overall Homeless by State") + theme(plot.title = element_text(size = 16), legend.position = "none")
})
}
)
shinyApp(
ui = fluidPage(
inputPanel(
selectInput("state", label = "State:", choice = unique(overall_data$state))),
fluidRow(
dataTableOutput("overalltable")
)
),
server = function(input, output) {
state <- reactive(input$state)
output$overalltable = renderDataTable({ overall_data %>% filter(state == input$state) %>%
select(state, CoC Name, year, value)})
}
)
shinyApp(
ui = fluidPage(
inputPanel(
selectInput("state", label = "State:", choice = unique(overall_data$state))),
fluidRow(
dataTableOutput("overalltable")
)
),
server = function(input, output) {
state <- reactive(input$state)
output$overalltable = renderDataTable({ overall_data %>% filter(state == input$state) %>%
select(state, `CoC Name`, year, value)})
}
)
shinyApp(
ui = fluidPage(
inputPanel(
selectInput("state", label = "State:", choice = unique(simple_data$state))),
fluidRow(
dataTableOutput("table")
)
),
server = function(input, output) {
state <- reactive(input$state)
output$table = renderDataTable({ simple_data %>% filter(state == input$state) %>%
select(state, `CoC Name`, name, gender, value, year)
})
}
)
